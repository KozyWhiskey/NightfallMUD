// server/src/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum Hostility { 
  FRIENDLY
  NEUTRAL
  HOSTILE 
  }
enum Class { 
  VANGUARD 
  SHADOWBLADE
  AETHER_WEAVER
  DAWNKEEPER
  TECHNOMANCER
  GLOOM_WARDEN 
  }
enum EquipSlot { 
  NONE
  HEAD
  CHEST
  LEGS
  FEET
  HANDS
  WEAPON_MAIN
  WEAPON_OFF
  RING
  AMULET
  }
enum Rarity { 
  COMMON
  UNCOMMON
  RARE
  LEGENDARY
  }
enum AffixType {
  PREFIX
  SUFFIX
  }

enum SpellType {
  CLASS
  UNIVERSAL
}

enum TargetType {
  SELF
  TARGET_ENEMY
  TARGET_ALLY
  AREA_OF_EFFECT
}

enum DamageType {
  PHYSICAL
  FIRE
  FROST
  GLOOM
  HOLY
  SHOCK
}

enum EffectType {
  DIRECT_DAMAGE
  HEAL
  APPLY_STATUS_EFFECT
  BUFF
  DEBUFF
}

// --- MODELS ---


model Account {
  id         String      @id @default(cuid())
  username   String      @unique
  password   String
  characters Character[]
}

model Character {
  id                    String @id @default(cuid())
  name                  String @unique
  class                 Class
  accountId             String
  account               Account @relation(fields: [accountId], references: [id])
  level                 Int
  experience            Int
  experienceToNextLevel Int
  unspentStatPoints     Int
  gold                  Int
  strength              Int
  dexterity             Int
  constitution          Int
  intelligence          Int
  wisdom                Int
  charisma              Int
  resolve               Int
  hp                    Int
  maxHp                 Int
  mana                  Int
  maxMana               Int
  defense               Int
  currentRoomId         String
  room                  Room    @relation("RoomToCharacters", fields: [currentRoomId], references: [id])
  inventory             Item[]  @relation("CharacterToItems")
  spells                CharacterSpell[]
}

model Room {
  id          String      @id
  name        String
  description String
  exits       Json
  x           Int         @default(0)
  y           Int         @default(0)
  z           Int         @default(0)
  characters  Character[] @relation("RoomToCharacters")
  items       Item[]      @relation("RoomToItems")
  mobs        Mob[]       @relation("RoomToMobs")
}



// The blueprint for a randomly generated item type (e.g., "Dagger")
// Renamed from BaseItemType to BaseItem and added base stats
model BaseItem {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  description     String
  slot            EquipSlot
  baseWeight      Float
  baseDamage      Int?
  baseArmor       Int?
  baseMagicResist Int?
  items           Item[] // Back-relation to Item instances
}

// A master list of all possible magical properties (Prefixes and Suffixes)
model Affix {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  type            AffixType
  requiredLevel   Int
  // attributes will store the actual stat modifications, e.g., { "strength": 5, "fireDamage": 10 }
  attributes      Json
  itemAffixes     ItemAffix[] // Back-relation to ItemAffix join table
}

// Join table for Item and Affix to store specific affix values for an item instance
model ItemAffix {
  id        Int    @id @default(autoincrement())
  itemId    String
  item      Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  affixId   Int
  affix     Affix  @relation(fields: [affixId], references: [id], onDelete: Cascade)
  // Store the actual value applied by this affix to this specific item instance
  // This allows for affixes like "Strength + (3-5)" where the actual value is rolled
  value     Json // e.g., { "strength": 4 }
}

// This represents a unique INSTANCE of an item in the world
model Item {
  id            String  @id @default(cuid())

  // Link to the BaseItem definition
  baseItemId    Int
  baseItem      BaseItem @relation(fields: [baseItemId], references: [id])

  // Link to applied affixes
  itemAffixes   ItemAffix[]

  // Instance-specific properties
  equipped      Boolean    @default(false)
  rarity        Rarity     @default(COMMON)

  // Location of this instance
  roomId        String?
  room          Room?   @relation("RoomToItems", fields: [roomId], references: [id])
  characterId   String?
  character     Character? @relation("CharacterToItems", fields: [characterId], references: [id])

  
}

model Mob {
  id                String    @id @default(cuid())
  name              String
  description       String
  hostility         Hostility @default(NEUTRAL)
  canDropGold       Boolean   @default(true)
  lootTable         Json      @default("[]")
  keywords          String[]
  level             Int
  hp                Int
  maxHp             Int
  strength          Int
  defense           Int
  experienceAward   Int
  roomId            String
  room              Room      @relation("RoomToMobs", fields: [roomId], references: [id])
}

// Master spell definitions
model Spell {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  description     String
  spellType       SpellType
  requiredClass   Class?
  requiredLevel   Int
  manaCost        Int
  targetType      TargetType
  castingTime     Int         // 0 = instant, 1 = 1 round, -1 = channeled
  cooldown        Int
  effects         SpellEffect[]
  characterSpells CharacterSpell[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// Individual effects within a spell
model SpellEffect {
  id              Int         @id @default(autoincrement())
  spellId         Int
  spell           Spell       @relation(fields: [spellId], references: [id], onDelete: Cascade)
  effectType      EffectType
  damageType      DamageType?
  baseValue       Int
  scalingFactor   Float
  statusEffectId  Int?
  statusEffect    StatusEffect? @relation(fields: [statusEffectId], references: [id])
  duration        Int?        // Duration in rounds
  order           Int         // Order of effects within the spell
}

// Status effects that can be applied by spells
model StatusEffect {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  description     String
  effectType      EffectType
  damageType      DamageType?
  baseValue       Int
  scalingFactor   Float
  duration        Int
  maxStacks       Int         @default(1)
  spellEffects    SpellEffect[]
}

// Character spellbook (spells known by each character)
model CharacterSpell {
  id              String      @id @default(cuid())
  characterId     String
  character       Character   @relation(fields: [characterId], references: [id], onDelete: Cascade)
  spellId         Int
  spell           Spell       @relation(fields: [spellId], references: [id], onDelete: Cascade)
  learnedAt       DateTime    @default(now())
  cooldownUntil   DateTime?   // Track cooldown per character

  @@unique([characterId, spellId])
}
